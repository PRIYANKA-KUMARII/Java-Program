Skip to main content
Google Classroom
Classroom
Core Java by Ravi Shankar Sir
Java Batch 42 and 43 (9th January 2025)
Abstract class and Abstract Method :Assignment details
Abstract class and Abstract Method :
Ravishankar Singh
•
4:00 PM
100 points

Batch_42_43_Assignment.txt
Text
Your work
Assigned
Private comments
Class comments
Assignment 01:
--------------
Define an abstract class 'Shape' with following specifications
Methods:
1. Name: getArea
   ReturnType: double
   Modifier: abstract
2. Name: printDetails
    ReturnType: double
    Modifier: abstract
Define sub-classes of Shape as Rectangle, Circle and Triangle that overrides the methods of Shape class
Rectangle class
Fields:
	1. length - double
	2. breadth - double
Constructors:
	A parametrized constructor the accepts and initializes length and breadth.
Circle class
Fields:
	1. radius - double
Constructors:
	A parametrized constructor the accepts and initializes radius.
Triangle class
Fields:
	1. base - double
	2. height - double
Constructors:
	A parametrized constructor the accepts and initializes base and height.
All the sub-classes of Shape should override the methods of the shape.
getArea() should return the area of the respective shape.
printDetails() should print the shape details as below
	input:  Rectangle(30.3, 45.4)
	output:
		Type = Rectangle
		Length = 30.3
		Breadth = 45.4
		Area = 1375.62
	input: Circle(23.2)
	output:
		Type = Circle
		Radius = 23.2
		Area = 1690.0736
	input: Triangle(146.2, 40.0);
	output:
		Type = Triangle
		Base = 146.2
		Height = 40.0
		Area = 2924.0
Given a class Testing with main method to test your code.
---------------------------------------------------------------------------------------------------
package com.nit.Abstract_shape.java;

public class Teseting {
	public static void main(String [] args) {
		Shape rectangle= new Rectangle(30.3, 45.4);
		rectangle.printDetails();
		System.out.println();
		Shape circle= new Circle(23.2);
		circle.printDetails();
		Shape triangle= new Triangle(146.2, 40.0);
		triangle.printDetails();
		
	}

}



package com.nit.Abstract_shape.java;
public abstract class Shape {
	public abstract double getArea();
	public abstract void printDetails();
}
class Rectangle extends Shape{
	private double length;
	private double breadth;
	public Rectangle(double length, double breadth) {
		this.length=length;
		this.breadth= breadth;
	}
	@Override
	public double getArea() {
		return length*breadth;
	}
	@Override
	public void printDetails() {
		System.out.println("Type =Reactangle");
		System.out.println("Length="+length);
		System.out.println("Breadth="+breadth);
		System.out.println("Area="+getArea());
		System.out.println("Rectangle: Length ="+length +", Breadth + "+breadth+" ,Area="+getArea());
	}
}
class Circle extends Shape{
	private double radius;
	
	public Circle(double radius) {
		this.radius= radius;
	}
	@Override 
	public double getArea() {
		return Math.PI*radius*radius;
		
	}
	
	@Override
	public void printDetails() {
		System.out.println("Circle :Radius="+radius+",Area="+getArea());
		
	}
}
class Triangle extends Shape{
	private double base;
	private double height;
	public Triangle(double base, double height) {
		this.base= base;
		this.height= height;
	}
	@Override
	public double getArea() {
		return 0.5*base*height;
		
	}
	@Override
	public void printDetails() {
		System.out.println("Triangle: Base="+base+". height="+height+",Area="+getArea());
			}
}
	



-------------------------------------------------------------------------
Assignment 02 :
---------------
creating a Java program to model different animal romes using abstract classes and subclasses. Follow the instructions below to complete the program:

Start by defining an abstract class called Animal with an abstract method:

roam(): This method should represent the roaming style of Animal.
Create a subclass named Lion that extends the Animal class. Implement the roam() method to print:
"Lion is roaming"

Create another subclass named Dog that also extends the Animal class. Implement the roam() method to print:
"Dog is roaming"

In the ELC, Main class, write a main method to accomplish the following by using upcasting.

Create an instance of the Lion class.
Call the roam() method on the lion instance.
Create an instance of the Dog class.
Call the roam() method on the Dog instance.
Ensure that your program output displays the unique roaming style of both the lion and the dog.

After Execution add the following Methdos in the sub classes :

Lion class :
-------------
public void roar() : Add this method in the Lion class to show the roaring behavior of Lion

Dog class :
-----------
public void bark() : Add this method in Dog class to show the barking behavior of Dog class

Take another static method in the ELC class
Method name : getAnimal()
return type : void
Parameter type : Animal
Modifiers : public, static

In the body of getAnimal() method, call both the methods of Lion and Dog class.
---------------------------------------------------------------------------------------package com.nit.Abstract_shape.java;

package com.nit.Abstract_shape.java;

public class AnimalDemo {
	public static void main(String [] args) {
		Animal lion= new Lion();
		lion.roam();
		Animal dog= new Dog();
		dog.roam();
		getAnimal(new Lion());
		getAnimal(new Dog());
	}
	public static void getAnimal(Animal animal) {
		if(animal instanceof Lion) {
			((Lion)animal).roam();
		}else if(animal instanceof Dog) {
			((Dog)animal).roam();
			
			
		}
	}

}


public abstract class Animal {
	public abstract void roam();
		
	}
	

class  Lion extends Animal{
	@Override
	public void roam() {
		System.out.println("Lion is roaming.");
	}
}
class Dog extends Animal{
	@Override
	public void roam() {
		System.out.println("Dog is roaming.");
	}
}



Batch_42 ... ment.txt